<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
		   width="100%" height="100%" 
		   xmlns:s="library://ns.adobe.com/flex/spark"
		   horizontalScrollPolicy="off"
		   verticalScrollPolicy="off">
	
	<mx:Script>
		<![CDATA[
			import com.dehats.sqla.model.AssetManager;
			import com.dehats.sqla.model.presentation.MainPM;
			
			import flash.desktop.NativeProcess;
			import flash.desktop.NativeProcessStartupInfo;
			import flash.events.Event;
			import flash.events.IOErrorEvent;
			import flash.events.NativeProcessExitEvent;
			import flash.events.ProgressEvent;
			import flash.filesystem.File;
			
			[Bindable]
			public var pm:MainPM;
			private var process:NativeProcess;
			private var AnalyzeResultText:String = "";
			
			private function StartAnalyze():void{
				
				if(NativeProcess.isSupported)
				{
					AnalyzeResultText = "" ;
					var nativeProcessStartupInfo:NativeProcessStartupInfo = new NativeProcessStartupInfo();
					var file:File = File.applicationDirectory.resolvePath("sqlite3_analyzer.exe");
					nativeProcessStartupInfo.executable = file;
					
					var processArgs:Vector.<String> = new Vector.<String>();
					processArgs[0] = pm.fileInfos ;
					nativeProcessStartupInfo.arguments = processArgs;
					
					process = new NativeProcess();
					process.start(nativeProcessStartupInfo);
					process.addEventListener(ProgressEvent.STANDARD_OUTPUT_DATA, onOutputData);
					process.addEventListener(ProgressEvent.STANDARD_ERROR_DATA, onErrorData);
					process.addEventListener(NativeProcessExitEvent.EXIT, onExit);
					process.addEventListener(IOErrorEvent.STANDARD_OUTPUT_IO_ERROR, onIOError);
					process.addEventListener(IOErrorEvent.STANDARD_ERROR_IO_ERROR, onIOError);
				}
				else
				{
					trace("NativeProcess not supported.");
					analyzeResults.text = "NativeProcess not supported.";
				}
				
			}
			
			public function onOutputData(event:ProgressEvent):void
			{
				AnalyzeResultText += process.standardOutput.readUTFBytes(process.standardOutput.bytesAvailable) ;
				//trace("Got: ", process.standardOutput.readUTFBytes(process.standardOutput.bytesAvailable)); 
			}
			
			public function onErrorData(event:ProgressEvent):void
			{
				trace("ERROR -", process.standardError.readUTFBytes(process.standardError.bytesAvailable)); 
			}
			
			public function onExit(event:NativeProcessExitEvent):void
			{
				trace("Process exited with ", event.exitCode);
				analyzeResults.text = AnalyzeResultText
				
				
			}
			
			public function onIOError(event:IOErrorEvent):void
			{
				trace(event.toString());
			}
			
			override protected function updateDisplayList(w:Number, h:Number):void
			{	
				super.updateDisplayList(w, h);
				
				analyzeResults.setActualSize(w - 20, h - 50);			
			}
			
		]]>
	</mx:Script>
	
	
	<mx:Button y="15" label="Analyze Current DB"
			   icon="{ AssetManager.ICON_ANALYZE}"
			   click=" StartAnalyze()" x="10"/>
	
	<mx:TextArea id="analyzeResults" horizontalScrollPolicy="auto"  top="50" bottom="10" left="10" editable="false" />

<!--	<mx:DataGrid id="analyzeResults" includeInLayout="{!pm.sqlStatementPM.hasError}" visible="{!pm.sqlStatementPM.hasError}"
				 horizontalScrollPolicy="auto"
				 dataProvider="{ pm.sqlStatementPM.results}"
				 top="50" bottom="10" left="10">
	</mx:DataGrid>-->
	
</mx:Canvas>
